"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unist-util-filter";
exports.ids = ["vendor-chunks/unist-util-filter"];
exports.modules = {

/***/ "(rsc)/./node_modules/unist-util-filter/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/unist-util-filter/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filter: () => (/* binding */ filter)\n/* harmony export */ });\n/* harmony import */ var unist_util_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-is */ \"(rsc)/./node_modules/unist-util-is/lib/index.js\");\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [cascade=true]\n *   Whether to drop parent nodes if they had children, but all their children\n *   were filtered out.\n */ \nconst own = {}.hasOwnProperty;\n/**\n * Create a new `tree` of copies of all nodes that pass `test`.\n *\n * The tree is walked in *preorder* (NLR), visiting the node itself, then its\n * head, etc.\n *\n * @param tree\n *   Tree to filter.\n * @param options\n *   Configuration (optional).\n * @param test\n *   `unist-util-is` compatible test.\n * @returns\n *   New filtered tree.\n *\n *   `null` is returned if `tree` itself didnâ€™t pass the test, or is cascaded\n *   away.\n */ const filter = /**\n   * @type {(\n   *  (<Tree extends Node, Check extends Test>(node: Tree, options: Options | null | undefined, test: Check | null | undefined) => import('./complex-types.js').Matches<Tree, Check>) &\n   *  (<Tree extends Node, Check extends Test>(node: Tree, test: Check) => import('./complex-types.js').Matches<Tree, Check>) &\n   *  (<Tree extends Node>(node: Tree, options?: Options | null | undefined) => Tree)\n   * )}\n   */ /**\n     * @param {Node} tree\n     * @param {Options | Test | null | undefined} [options]\n     * @param {Test | null | undefined} [test]\n     * @returns {Node | null}\n     */ function(tree, options, test) {\n    const is = (0,unist_util_is__WEBPACK_IMPORTED_MODULE_0__.convert)(test || options);\n    /** @type {boolean | null | undefined} */ const cascadeRaw = options && typeof options === \"object\" && \"cascade\" in options ? /** @type {boolean | null | undefined} */ options.cascade : undefined;\n    const cascade = cascadeRaw === undefined || cascadeRaw === null ? true : cascadeRaw;\n    return preorder(tree);\n    /**\n       * @param {Node} node\n       *   Current node.\n       * @param {number | undefined} [index]\n       *   Index of `node` in `parent`.\n       * @param {Parent | undefined} [parent]\n       *   Parent node.\n       * @returns {Node | null}\n       *   Shallow copy of `node`.\n       */ function preorder(node, index, parent) {\n        /** @type {Array<Node>} */ const children = [];\n        if (!is(node, index, parent)) return null;\n        // @ts-expect-error: Looks like a parent.\n        if (node.children) {\n            let childIndex = -1;\n            // @ts-expect-error Looks like a parent.\n            while(++childIndex < node.children.length){\n                // @ts-expect-error Looks like a parent.\n                const result = preorder(node.children[childIndex], childIndex, node);\n                if (result) {\n                    children.push(result);\n                }\n            }\n            // @ts-expect-error Looks like a parent.\n            if (cascade && node.children.length > 0 && children.length === 0) return null;\n        }\n        // Create a shallow clone, using the new children.\n        /** @type {typeof node} */ // @ts-expect-error all the fields will be copied over.\n        const next = {};\n        /** @type {string} */ let key;\n        for(key in node){\n            if (own.call(node, key)) {\n                // @ts-expect-error: Looks like a record.\n                next[key] = key === \"children\" ? children : node[key];\n            }\n        }\n        return next;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1maWx0ZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Q0FVQyxHQUVvQztBQUVyQyxNQUFNQyxNQUFNLENBQUMsRUFBRUMsY0FBYztBQUU3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQkMsR0FDTSxNQUFNQyxTQUNYOzs7Ozs7R0FNQyxHQUVDOzs7OztLQUtDLEdBQ0QsU0FBVUMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLElBQUk7SUFDM0IsTUFBTUMsS0FBS1Asc0RBQU9BLENBQUNNLFFBQVFEO0lBQzNCLHVDQUF1QyxHQUN2QyxNQUFNRyxhQUNKSCxXQUFXLE9BQU9BLFlBQVksWUFBWSxhQUFhQSxVQUNuRCx1Q0FBdUMsR0FBSUEsUUFBUUksT0FBTyxHQUMxREM7SUFDTixNQUFNRCxVQUNKRCxlQUFlRSxhQUFhRixlQUFlLE9BQU8sT0FBT0E7SUFFM0QsT0FBT0csU0FBU1A7SUFFaEI7Ozs7Ozs7OztPQVNDLEdBQ0QsU0FBU08sU0FBU0MsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLE1BQU07UUFDbkMsd0JBQXdCLEdBQ3hCLE1BQU1DLFdBQVcsRUFBRTtRQUVuQixJQUFJLENBQUNSLEdBQUdLLE1BQU1DLE9BQU9DLFNBQVMsT0FBTztRQUVyQyx5Q0FBeUM7UUFDekMsSUFBSUYsS0FBS0csUUFBUSxFQUFFO1lBQ2pCLElBQUlDLGFBQWEsQ0FBQztZQUVsQix3Q0FBd0M7WUFDeEMsTUFBTyxFQUFFQSxhQUFhSixLQUFLRyxRQUFRLENBQUNFLE1BQU0sQ0FBRTtnQkFDMUMsd0NBQXdDO2dCQUN4QyxNQUFNQyxTQUFTUCxTQUFTQyxLQUFLRyxRQUFRLENBQUNDLFdBQVcsRUFBRUEsWUFBWUo7Z0JBRS9ELElBQUlNLFFBQVE7b0JBQ1ZILFNBQVNJLElBQUksQ0FBQ0Q7Z0JBQ2hCO1lBQ0Y7WUFFQSx3Q0FBd0M7WUFDeEMsSUFBSVQsV0FBV0csS0FBS0csUUFBUSxDQUFDRSxNQUFNLEdBQUcsS0FBS0YsU0FBU0UsTUFBTSxLQUFLLEdBQzdELE9BQU87UUFDWDtRQUVBLGtEQUFrRDtRQUNsRCx3QkFBd0IsR0FDeEIsdURBQXVEO1FBQ3ZELE1BQU1HLE9BQU8sQ0FBQztRQUNkLG1CQUFtQixHQUNuQixJQUFJQztRQUVKLElBQUtBLE9BQU9ULEtBQU07WUFDaEIsSUFBSVgsSUFBSXFCLElBQUksQ0FBQ1YsTUFBTVMsTUFBTTtnQkFDdkIseUNBQXlDO2dCQUN6Q0QsSUFBSSxDQUFDQyxJQUFJLEdBQUdBLFFBQVEsYUFBYU4sV0FBV0gsSUFBSSxDQUFDUyxJQUFJO1lBQ3ZEO1FBQ0Y7UUFFQSxPQUFPRDtJQUNUO0FBQ0YsRUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1maWx0ZXIvbGliL2luZGV4LmpzP2ZmM2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUGFyZW50fSBQYXJlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0LXV0aWwtaXMnKS5UZXN0fSBUZXN0XG4gKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbY2FzY2FkZT10cnVlXVxuICogICBXaGV0aGVyIHRvIGRyb3AgcGFyZW50IG5vZGVzIGlmIHRoZXkgaGFkIGNoaWxkcmVuLCBidXQgYWxsIHRoZWlyIGNoaWxkcmVuXG4gKiAgIHdlcmUgZmlsdGVyZWQgb3V0LlxuICovXG5cbmltcG9ydCB7Y29udmVydH0gZnJvbSAndW5pc3QtdXRpbC1pcydcblxuY29uc3Qgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgYHRyZWVgIG9mIGNvcGllcyBvZiBhbGwgbm9kZXMgdGhhdCBwYXNzIGB0ZXN0YC5cbiAqXG4gKiBUaGUgdHJlZSBpcyB3YWxrZWQgaW4gKnByZW9yZGVyKiAoTkxSKSwgdmlzaXRpbmcgdGhlIG5vZGUgaXRzZWxmLCB0aGVuIGl0c1xuICogaGVhZCwgZXRjLlxuICpcbiAqIEBwYXJhbSB0cmVlXG4gKiAgIFRyZWUgdG8gZmlsdGVyLlxuICogQHBhcmFtIG9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHBhcmFtIHRlc3RcbiAqICAgYHVuaXN0LXV0aWwtaXNgIGNvbXBhdGlibGUgdGVzdC5cbiAqIEByZXR1cm5zXG4gKiAgIE5ldyBmaWx0ZXJlZCB0cmVlLlxuICpcbiAqICAgYG51bGxgIGlzIHJldHVybmVkIGlmIGB0cmVlYCBpdHNlbGYgZGlkbuKAmXQgcGFzcyB0aGUgdGVzdCwgb3IgaXMgY2FzY2FkZWRcbiAqICAgYXdheS5cbiAqL1xuZXhwb3J0IGNvbnN0IGZpbHRlciA9XG4gIC8qKlxuICAgKiBAdHlwZSB7KFxuICAgKiAgKDxUcmVlIGV4dGVuZHMgTm9kZSwgQ2hlY2sgZXh0ZW5kcyBUZXN0Pihub2RlOiBUcmVlLCBvcHRpb25zOiBPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZCwgdGVzdDogQ2hlY2sgfCBudWxsIHwgdW5kZWZpbmVkKSA9PiBpbXBvcnQoJy4vY29tcGxleC10eXBlcy5qcycpLk1hdGNoZXM8VHJlZSwgQ2hlY2s+KSAmXG4gICAqICAoPFRyZWUgZXh0ZW5kcyBOb2RlLCBDaGVjayBleHRlbmRzIFRlc3Q+KG5vZGU6IFRyZWUsIHRlc3Q6IENoZWNrKSA9PiBpbXBvcnQoJy4vY29tcGxleC10eXBlcy5qcycpLk1hdGNoZXM8VHJlZSwgQ2hlY2s+KSAmXG4gICAqICAoPFRyZWUgZXh0ZW5kcyBOb2RlPihub2RlOiBUcmVlLCBvcHRpb25zPzogT3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWQpID0+IFRyZWUpXG4gICAqICl9XG4gICAqL1xuICAoXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSB0cmVlXG4gICAgICogQHBhcmFtIHtPcHRpb25zIHwgVGVzdCB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICAgICAqIEBwYXJhbSB7VGVzdCB8IG51bGwgfCB1bmRlZmluZWR9IFt0ZXN0XVxuICAgICAqIEByZXR1cm5zIHtOb2RlIHwgbnVsbH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodHJlZSwgb3B0aW9ucywgdGVzdCkge1xuICAgICAgY29uc3QgaXMgPSBjb252ZXJ0KHRlc3QgfHwgb3B0aW9ucylcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9ICovXG4gICAgICBjb25zdCBjYXNjYWRlUmF3ID1cbiAgICAgICAgb3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcgJiYgJ2Nhc2NhZGUnIGluIG9wdGlvbnNcbiAgICAgICAgICA/IC8qKiBAdHlwZSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9ICovIChvcHRpb25zLmNhc2NhZGUpXG4gICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgIGNvbnN0IGNhc2NhZGUgPVxuICAgICAgICBjYXNjYWRlUmF3ID09PSB1bmRlZmluZWQgfHwgY2FzY2FkZVJhdyA9PT0gbnVsbCA/IHRydWUgOiBjYXNjYWRlUmF3XG5cbiAgICAgIHJldHVybiBwcmVvcmRlcih0cmVlKVxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgICAgICogICBDdXJyZW50IG5vZGUuXG4gICAgICAgKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gW2luZGV4XVxuICAgICAgICogICBJbmRleCBvZiBgbm9kZWAgaW4gYHBhcmVudGAuXG4gICAgICAgKiBAcGFyYW0ge1BhcmVudCB8IHVuZGVmaW5lZH0gW3BhcmVudF1cbiAgICAgICAqICAgUGFyZW50IG5vZGUuXG4gICAgICAgKiBAcmV0dXJucyB7Tm9kZSB8IG51bGx9XG4gICAgICAgKiAgIFNoYWxsb3cgY29weSBvZiBgbm9kZWAuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHByZW9yZGVyKG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtBcnJheTxOb2RlPn0gKi9cbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXVxuXG4gICAgICAgIGlmICghaXMobm9kZSwgaW5kZXgsIHBhcmVudCkpIHJldHVybiBudWxsXG5cbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogTG9va3MgbGlrZSBhIHBhcmVudC5cbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICBsZXQgY2hpbGRJbmRleCA9IC0xXG5cbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIExvb2tzIGxpa2UgYSBwYXJlbnQuXG4gICAgICAgICAgd2hpbGUgKCsrY2hpbGRJbmRleCA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIExvb2tzIGxpa2UgYSBwYXJlbnQuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBwcmVvcmRlcihub2RlLmNoaWxkcmVuW2NoaWxkSW5kZXhdLCBjaGlsZEluZGV4LCBub2RlKVxuXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2gocmVzdWx0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgTG9va3MgbGlrZSBhIHBhcmVudC5cbiAgICAgICAgICBpZiAoY2FzY2FkZSAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDAgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIHNoYWxsb3cgY2xvbmUsIHVzaW5nIHRoZSBuZXcgY2hpbGRyZW4uXG4gICAgICAgIC8qKiBAdHlwZSB7dHlwZW9mIG5vZGV9ICovXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYWxsIHRoZSBmaWVsZHMgd2lsbCBiZSBjb3BpZWQgb3Zlci5cbiAgICAgICAgY29uc3QgbmV4dCA9IHt9XG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgICBsZXQga2V5XG5cbiAgICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICAgIGlmIChvd24uY2FsbChub2RlLCBrZXkpKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBMb29rcyBsaWtlIGEgcmVjb3JkLlxuICAgICAgICAgICAgbmV4dFtrZXldID0ga2V5ID09PSAnY2hpbGRyZW4nID8gY2hpbGRyZW4gOiBub2RlW2tleV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dFxuICAgICAgfVxuICAgIH1cbiAgKVxuIl0sIm5hbWVzIjpbImNvbnZlcnQiLCJvd24iLCJoYXNPd25Qcm9wZXJ0eSIsImZpbHRlciIsInRyZWUiLCJvcHRpb25zIiwidGVzdCIsImlzIiwiY2FzY2FkZVJhdyIsImNhc2NhZGUiLCJ1bmRlZmluZWQiLCJwcmVvcmRlciIsIm5vZGUiLCJpbmRleCIsInBhcmVudCIsImNoaWxkcmVuIiwiY2hpbGRJbmRleCIsImxlbmd0aCIsInJlc3VsdCIsInB1c2giLCJuZXh0Iiwia2V5IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/unist-util-filter/lib/index.js\n");

/***/ })

};
;